<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【PicGo+Typora+Gitee】markdown图片上传并获取网络地址</title>
    <url>/posts/fb1f1bf6/</url>
    <content><![CDATA[<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul>
<li><p>Gitee</p>
<p>新建一个仓库，用来存放上传的图片，记得要设置为开源，点击创建</p>
<p><img src="https://gitee.com/jmuAva/blogimage/raw/master/img/image-20211027102140541.png" alt="新建仓库"></p>
<p>获取私人令牌token，复制并保存好令牌，下面PicGo设置时需要用到</p>
<p><img src="https://gitee.com/jmuAva/blogimage/raw/master/img/image-20211027102647981.png" alt="获取token"></p>
</li>
</ul>
<ul>
<li><p>PicGo</p>
<p><a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0">PicGo下载地址</a>选择最新的2.3.0下载，我是Windows系统，选择x64.exe版本</p>
<p><img src="https://gitee.com/jmuAva/blogimage/raw/master/img/image-20211027094143934.png" alt="【PicGo】下载"></p>
<p>​    PicGo的默认图床里没有Gitee，需要安装插件。下载安装完成后，打开PicGo插件设置搜索Gitee，选择gitee-uploader安装</p>
<p><img src="https://gitee.com/jmuAva/blogimage/raw/master/img/image-20211027094630259.png" alt="【PicGo】插件设置"></p>
<p>安装好了之后，在图床设置里就能看到Gitee了，设置如下：</p>
<ul>
<li><p>repo：存放的是仓库地址，eg:<code>owner/repoName</code>，注意仓库大小写</p>
</li>
<li><p>branch：分支，默认master</p>
</li>
<li><p>token：私人令牌</p>
</li>
<li><p>path：文件路径，eg: <code>img/$customPath</code>，$customPath为占位符</p>
</li>
<li><p>customPath：自动配置路径</p>
</li>
<li><p>customUrl：用来代替 <code>https://gitee.com/:owner/:repo/raw/:path/:filename</code>(默认配置路径), eg:<code>$&#123;customUrl&#125;/path/filename.jpg</code></p>
</li>
</ul>
<p><img src="https://gitee.com/jmuAva/blogimage/raw/master/img/2021/10/image-20211027113347838.png" alt="【PicGo】gitee设置"></p>
</li>
</ul>
<ul>
<li><p>Typora</p>
<p>Typora更新至<a href="https://www.typora.io/">最新版本</a>，打开偏好设置-图像，设置如下：</p>
<p><img src="https://gitee.com/jmuAva/blogimage/raw/master/img/image-20211027103103266.png" alt="Typora偏好设置"></p>
<p>完成设置后，点击验证图片上传选项进行测试</p>
<p><img src="https://gitee.com/jmuAva/blogimage/raw/master/img/image-20211027103312853.png" alt="图片上传测试"></p>
<p>若图片测试失败，检查PicGo设置下的Server监听端口是否为36677，确定PicGo上传功能正常再检查Typora设置。</p>
<p><img src="https://gitee.com/jmuAva/blogimage/raw/master/img/image-20211027103406478.png" alt="server设置">    <img src="https://gitee.com/jmuAva/blogimage/raw/master/img/image-20211027103834888.png" alt="PicGo图片上传"></p>
</li>
</ul>
<h4 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h4><p>​    markdown文档写完以后，可以选择将整篇文档的图片一起上传，也可以单张图片上传</p>
<ul>
<li>单张图片上传：右键单击图片，选择上传图片</li>
</ul>
<p>​    <img src="https://gitee.com/jmuAva/blogimage/raw/master/img/image-20211027104411593.png" alt="上传单张图片"></p>
<ul>
<li><p>整篇文档的图片一起上传：格式-图像-上传所有本地图片</p>
<p><img src="https://gitee.com/jmuAva/blogimage/raw/master/img/image-20211027104558843.png" alt="上传所有本地图片"></p>
</li>
</ul>
<p>上传成功后图片的路径变为网络地址，图片就能相对长久且稳定的显示了。</p>
<p><img src="https://gitee.com/jmuAva/blogimage/raw/master/img/2021/10/image-20211027113624918.png" alt="pic"></p>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot-Vue第三方统一认证接口——调用与对接总结</title>
    <url>/posts/1162c631/</url>
    <content><![CDATA[<p>​    基于SpringBoot-Vue的前后端分离项目，服务器部署在CentOS8操作系统上，与第三方进行统一认证接口的对接。第三方统一认证登录可以解决用户在浏览器打开多个web应用时需要输入多次用户名密码登录的问题，实现用户一次登录，多个系统使用的效果。s</p>
<a id="more"></a>

<h3 id="Web登录过程"><a href="#Web登录过程" class="headerlink" title="Web登录过程"></a>Web登录过程</h3><p>​    Web页面集成统一认证的原理是：当在浏览器打开集成了统一认证的某应用的页面时，页面重定向跳转到统一认证登录界面，登录之后页面重新回到用户请求的目标页面，而此时，如果用户在相同浏览器再打开另外一个集成了统一认证的页面时，由于该页面也会跳转到统一认证登录页，因为是在相同浏览器，统一认证登录的session仍然有效，所以会自动验证用户已经登录，不需要重新登录，便可以自动跳转到用户访问真正的目标页面，实现单点登录。</p>
<p>​    web应用接入的登录流程如下：</p>
<p><img src="https://gitee.com/jmuAva/blogimage/raw/master/img/1635153653761.png" alt="1635153653761"></p>
<ol>
<li>当用户首次访问Web应用时，Web应用会将请求重定向到统一认证的登录页面,重定向的过程一般是重定向到<a href="#_%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3_2">登录接口</a>，这个过程重定向需要传三个参数：<ul>
<li>client_id</li>
<li>response_type</li>
<li>redirect_uri</li>
</ul>
</li>
<li>用户在登录页面输入用户名密码后提交登录,这个过程与Web应用无关，由统一认证服务管控。</li>
<li>统一认证服务会颁发授权码（code）和id_token给Web应用，并将用户重定向到Web应用。</li>
<li>Web应用通过id_token验证用户身份，完成本地登录。验证id_token之后，从id_token的playload中即可获取用户信息</li>
</ol>
<h4 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h4><table>
<thead>
<tr>
<th>URL</th>
<th><a href="http://serverIp:port/serverPath/oauth2/authorize">http://serverIp:port/serverPath/oauth2/authorize</a></th>
</tr>
</thead>
<tbody><tr>
<td><strong>调用方式</strong></td>
<td>GET</td>
</tr>
<tr>
<td><strong>参数</strong></td>
<td>redirect_uri：重定向地址                                                                                                                                               response_type：重定向的时候需要附加的用户登录信息，可选code或code id_token                                                                                                                                                         client_id：应用唯一标识</td>
</tr>
<tr>
<td><strong>返回值</strong></td>
<td>登录页面</td>
</tr>
<tr>
<td><strong>属性说明</strong></td>
<td>用户通过登录页面输入用户名和密码登录成功后，统一认证服务会将授权码和ID Token作为参数附加在<strong>redirect_uri</strong>后面并重定向到这个地址。 客户端可以通过ID Token获取用户信息，完成本地登录。</td>
</tr>
<tr>
<td><strong>备注</strong></td>
<td>ID Token是一个使用HS256算法和ClientSecret作为密钥签名的JWT，客户端必须使用自己的ClientSecret验证ID Token的有效性。</td>
</tr>
</tbody></table>
<h4 id="前端页面跳转"><a href="#前端页面跳转" class="headerlink" title="前端页面跳转"></a>前端页面跳转</h4><p>​    项目使用的是<a href="https://gitee.com/y_project/RuoYi">RUOYI框架</a></p>
<p>​    当进入登录页面时，使用vue-router路由守卫进行拦截，判断cookie里是否存在本地token，不存在或者token已过期则跳转到第三方登录界面进行登录。</p>
<p>​    修改permission.js文件</p>
<p><img src="https://gitee.com/jmuAva/blogimage/raw/master/img/1635215125620.png" alt="1635215125620"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由守卫：主要用来通过跳转或取消的方式守卫路由</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  NProgress.start() <span class="comment">// 开启进度条</span></span><br><span class="line">  <span class="built_in">document</span>.title = defSet.title</span><br><span class="line">  <span class="comment">// 跳转到index携参token</span></span><br><span class="line">  <span class="keyword">if</span> (to.path.indexOf(<span class="string">&#x27;/index&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;token设置&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (to.query.localToken !== <span class="literal">null</span> &amp;&amp; to.query.localToken !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      setToken(to.query.localToken)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (getToken()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;有token，本地登录成功&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (store.getters.roles.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断当前用户是否已拉取完user_info信息</span></span><br><span class="line">      store.dispatch(<span class="string">&#x27;GetInfo&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 拉取user_info</span></span><br><span class="line">        <span class="keyword">const</span> roles = res.roles</span><br><span class="line">        store.dispatch(<span class="string">&#x27;GenerateRoutes&#x27;</span>, &#123;roles&#125;).then(<span class="function"><span class="params">accessRoutes</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 根据roles权限生成可访问的路由表</span></span><br><span class="line">          router.addRoutes(accessRoutes) <span class="comment">// 动态添加可访问路由表</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;路由表添加成功&quot;</span>);</span><br><span class="line">          next(&#123;...to, <span class="attr">replace</span>: <span class="literal">true</span>&#125;) <span class="comment">// hack方法 确保addRoutes已完成</span></span><br><span class="line">          NProgress.done()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          store.dispatch(<span class="string">&#x27;LogOut&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            Message.error(err)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;退出登录&quot;</span>);</span><br><span class="line">            <span class="built_in">window</span>.location.href = <span class="string">&quot;http://serverIp:port/sso/oauth2/logout?post_logout_redirect_uri=http://localIp:port&amp;response_type=code id_token&amp;client_id=clientId&quot;</span> <span class="comment">//外链地址</span></span><br><span class="line">            next(&#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>&#125;)</span><br><span class="line">            <span class="comment">// next()</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;无本地token，进入品高界面登录&quot;</span>);</span><br><span class="line">    <span class="comment">// 带重定向地址跳转，登录成功后跳转回来，并在地址后附带用户登录参数</span></span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">&quot;http://serverIp:port/sso/oauth2/authorize?redirect_uri=http://localIp:port/stage-api/api/v1/thirdParty/checkTokenThenLogin&amp;response_type=code id_token&amp;client_id=clientId&quot;</span>;</span><br><span class="line">    next(); <span class="comment">// 放行</span></span><br><span class="line">    <span class="comment">// next(false);</span></span><br><span class="line">    NProgress.done(); <span class="comment">//关闭进度条</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>


<h3 id="Web注销过程"><a href="#Web注销过程" class="headerlink" title="Web注销过程"></a>Web注销过程</h3><p>​    单点登录完成之后，当用户需要注销时，必须通过单点注销注销所有已经登录的应用系统。单点注销需要完成以下两步：</p>
<ul>
<li>注销所有已登陆的系统</li>
<li>注销统一认证</li>
</ul>
<p>​    流程如下：</p>
<p><img src="https://gitee.com/jmuAva/blogimage/raw/master/img/1635155298487.png" alt="1635155298487"></p>
<ol>
<li>这里的注销地址在浏览器直接重定向即可，接口说明请看<a href="#_%E6%B3%A8%E9%94%80%E6%8E%A5%E5%8F%A3_1">注销接口</a>。</li>
<li>ua会在注销接口中直接返回一个注销页面，这个页面中包含了所有已登录的应用的注销地址。</li>
<li>注销所有已登录的应用</li>
<li>注销统一认证服务</li>
<li>重定向到最初传给注销接口的url。</li>
</ol>
<h4 id="注销接口"><a href="#注销接口" class="headerlink" title="注销接口"></a>注销接口</h4><table>
<thead>
<tr>
<th><strong>URL</strong></th>
<th><a href="http://serverIp:port/serverPath/oauth2/logout">http://serverIp:port/serverPath/oauth2/logout</a></th>
</tr>
</thead>
<tbody><tr>
<td><strong>调用方式</strong></td>
<td>GET</td>
</tr>
<tr>
<td><strong>参数</strong></td>
<td>post_logout_redirect_uri：可选，注销完成后跳转地址，没有传的话默认会跳转到统一认证根目录。</td>
</tr>
</tbody></table>
<p>​    注销不需要写后端接口，只需要重定向到统一认证注销地址，项目里需要写重定向的位置：</p>
<ul>
<li>permission.js里，路由守卫拦截时，判断当前用户是否已拉取完user_info信息，如果有报错，则退出登录。</li>
<li>页面相应拦截器，当检测到本地token过期时，跳出重新登录提示，确认后需要跳转到第三方登录界面。</li>
<li>导航组件有退出登录的功能，需要匹配第三方注销跳转。</li>
</ul>
<p><code> src\permission.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由守卫：主要用来通过跳转或取消的方式守卫路由</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  NProgress.start() <span class="comment">// 开启进度条</span></span><br><span class="line">  <span class="built_in">document</span>.title = defSet.title</span><br><span class="line">  <span class="comment">// 跳转到index携参token</span></span><br><span class="line">  <span class="keyword">if</span> (to.path.indexOf(<span class="string">&#x27;/index&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;token设置&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (to.query.localToken !== <span class="literal">null</span> &amp;&amp; to.query.localToken !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      setToken(to.query.localToken)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (getToken()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;有token，本地登录成功&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (store.getters.roles.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断当前用户是否已拉取完user_info信息</span></span><br><span class="line">      store.dispatch(<span class="string">&#x27;GetInfo&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 拉取user_info</span></span><br><span class="line">        <span class="keyword">const</span> roles = res.roles</span><br><span class="line">        store.dispatch(<span class="string">&#x27;GenerateRoutes&#x27;</span>, &#123;roles&#125;).then(<span class="function"><span class="params">accessRoutes</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 根据roles权限生成可访问的路由表</span></span><br><span class="line">          router.addRoutes(accessRoutes) <span class="comment">// 动态添加可访问路由表</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;路由表添加成功&quot;</span>);</span><br><span class="line">          next(&#123;...to, <span class="attr">replace</span>: <span class="literal">true</span>&#125;) <span class="comment">// hack方法 确保addRoutes已完成</span></span><br><span class="line">          NProgress.done()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          store.dispatch(<span class="string">&#x27;LogOut&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            Message.error(err)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;退出登录&quot;</span>);</span><br><span class="line">            <span class="built_in">window</span>.location.href = <span class="string">&quot;http://serverIp:port/sso/oauth2/logout?post_logout_redirect_uri=http://localIp:port&amp;response_type=code id_token&amp;client_id=clientId&quot;</span> <span class="comment">//外链地址</span></span><br><span class="line">            next(&#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>&#125;)</span><br><span class="line">            <span class="comment">// next()</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;无本地token，进入品高界面登录&quot;</span>);</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">&quot;http://serverIp:port/sso/oauth2/authorize?redirect_uri=http://localIp:port/stage-api/api/v1/thirdParty/checkTokenThenLogin&amp;response_type=code id_token&amp;client_id=clientId&quot;</span>;</span><br><span class="line">    next(); <span class="comment">// 放行</span></span><br><span class="line">    <span class="comment">// next(false);</span></span><br><span class="line">    NProgress.done(); <span class="comment">//关闭进度条</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><code>src\utils\request.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> code = res.data.code</span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">401</span>) &#123;</span><br><span class="line">      MessageBox.confirm(</span><br><span class="line">        <span class="string">&#x27;登录状态已过期，您可以继续留在该页面，或者重新登录&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;系统提示&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          confirmButtonText: <span class="string">&#x27;重新登录&#x27;</span>,</span><br><span class="line">          cancelButtonText: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        store.dispatch(<span class="string">&#x27;LogOut&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// location.href = &#x27;/index&#x27;;</span></span><br><span class="line">          <span class="comment">// 重定位到外链地址</span></span><br><span class="line">          location.reload() <span class="comment">// 为了重新实例化vue-router对象 避免bug</span></span><br><span class="line">          <span class="built_in">window</span>.location.href = <span class="string">&quot;http://serverIp:port/sso/oauth2/logout?post_logout_redirect_uri=http://localIp:port&amp;response_type=code id_token&amp;client_id=clientId&quot;</span> <span class="comment">//外链地址</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code !== <span class="number">200</span>) &#123;</span><br><span class="line">      Notification.error(&#123;</span><br><span class="line">        title: res.data.msg</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span> + error)</span><br><span class="line">    Message(&#123;</span><br><span class="line">      message: error.message,</span><br><span class="line">      type: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      duration: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><code>src\layout\components\Navbar.vue</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">toggleSideBar</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;app/toggleSideBar&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">logout</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$confirm(<span class="string">&#x27;确定注销并退出系统吗？&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">      confirmButtonText: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">      cancelButtonText: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">      type: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;LogOut&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        location.reload()</span><br><span class="line">        <span class="comment">// location.href = &#x27;/index&#x27;;</span></span><br><span class="line">        <span class="built_in">window</span>.location.href = <span class="string">&quot;http://serverIp:port/sso/oauth2/logout?post_logout_redirect_uri=http://localIp:port&amp;response_type=code id_token&amp;client_id=clientId&quot;</span> <span class="comment">//外链地址</span></span><br><span class="line">      &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>安装hexo-abbrlink插件后图片路径错误</title>
    <url>/posts/e6e4b7aa/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>有中文路径的链接经常会乱码，插件hexo-abbrlink会将原来的URL地址重新进行进制转换和再编码，于是决定引入该插件。根据网上的教程安装后，博客里的图片都不能正常显示了。</p>
<p><font color="red">教程有风险，选择需谨慎，教程的配置不一定完全适合你的环境！</font></p>
<a id="more"></a>

<p><img src="/imageUrl-error/1614154196927.png" alt="教程图片"></p>
<h3 id="冲突原因"><a href="#冲突原因" class="headerlink" title="冲突原因"></a>冲突原因</h3><ul>
<li><p>设置了post_asset_folder: true后，hexo new “title.md”会生成同名的title文件存放图片文件</p>
</li>
<li><p>设置过Typora图片存放路径后，图片会自动储存到title同名文件夹</p>
<p><img src="/imageUrl-error/1614153374245.png" alt="Typora图片设置"></p>
</li>
<li><p>hexo clean、hexo generate生成静态文件后，图片找不到路径。</p>
</li>
</ul>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p><font color="red">有问题先看看官方文档或者github上的issue</font></p>
<p>修改permalink设置后，图片显示正常。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">permalink: posts&#x2F;:abbrlink&#x2F;</span><br></pre></td></tr></table></figure>
<p>若依旧不能正常显示的话，可以尝试其他方案，详见参考文章。</p>
<p><img src="/imageUrl-error/1614154731760.png"></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://github.com/rozbo/hexo-abbrlink/issues/19">hexo-abbrlink插件Github提问及回答</a></p>
]]></content>
      <tags>
        <tag>-hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT版本更新记录7.8.0 - 8.2.1</title>
    <url>/posts/58272/</url>
    <content><![CDATA[<p>由于可抗力（Twikoo真香！）因素，搭建博客不到一个月，决定更新主题版本。</p>
<p>版本7.8.0到版本8.2.1最明显的区别，应该就在仓库上了，主题NexT的GIT存储库更改。</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>版本</th>
<th align="left">年份</th>
<th>仓库</th>
</tr>
</thead>
<tbody><tr>
<td>v5.1.4 或更低</td>
<td align="left">2014 ~ 2017</td>
<td><a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a></td>
</tr>
<tr>
<td>v6.0.0 ~ v7.8.0</td>
<td align="left">2018 ~ 2019</td>
<td><a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></td>
</tr>
<tr>
<td>v8.0.0 或更高</td>
<td align="left">2020</td>
<td><a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></td>
</tr>
</tbody></table>
<h4 id="保存旧版本"><a href="#保存旧版本" class="headerlink" title="保存旧版本"></a>保存旧版本</h4><p>​    备份NexT文件，尤其是两个配置文件，即 <code>hexo/_config.yml</code> 和 <code>hexo/themes/next/_config.yml</code></p>
<h4 id="升级新版本"><a href="#升级新版本" class="headerlink" title="升级新版本"></a>升级新版本</h4><p>​    获取最新更新，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;next-theme&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>​    若是Hexo v5.0及以上，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>
<p>v7.8.0时，本博客在<code>hexo/source/_data/next.yml</code>里修改配置，在个性化设置里</p>
<p>更新到v8.2.1后，在<code>next/_config.yml</code>下设置override: false会报WARN，用<code>_config.next.yml</code>文件代替。</p>
<p><img src="/NexT%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%957-8-0-8-2-1/1613802227726.png"></p>
<p>将<code>next.yml</code>文件剪切并重命名为<code>_config.next.yml</code>。</p>
<p>这时重启localhost，会有一些未转码的字符</p>
<p><img src="/NexT%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%957-8-0-8-2-1/1613802658053.png"></p>
<p><img src="/NexT%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%957-8-0-8-2-1/1613802668829.png"></p>
<p><img src="/NexT%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%957-8-0-8-2-1/1613807104322.png"></p>
<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>​    将这些自定义的配置进行修改，或者将没必要的删除。使用swig 的语法写过的自定义内容如果报错，且生成的页面为空白，是因为NexT从v7.4.2开始使用 Nunjucks 代替 swig 作为模版引擎，而Nunjucks 只支持 <code>and</code> 运算符，需要替换掉 swig 中的 <code>&amp;&amp;</code>。</p>
<blockquote>
<p>​    Hexo 5.0 版本移除了对于 swig 模版的支持，改为独立的 hexo-renderer-swig 插件。如果使用旧版本的 NexT，并发现 Hexo 生成的 html 中输出了模版源码，不想改模板的话可以选择升级 NexT 或降级 Hexo。</p>
</blockquote>
<p><img src="/NexT%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%957-8-0-8-2-1/1613808001607.png"></p>
<p>比如<code>source/_data/body_end.swig</code>文件里，设置了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 鼠标点击特效 #&#125;</span><br><span class="line">&#123;% if theme.cursor_effect &#x3D;&#x3D; &quot;fireworks&quot; %&#125;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;fireworks.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect &#x3D;&#x3D; &quot;explosion&quot; %&#125;</span><br><span class="line">  &lt;canvas class&#x3D;&quot;fireworks&quot; style&#x3D;&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;&#x2F;canvas&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;animejs&#x2F;2.2.0&#x2F;anime.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;explosion.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect &#x3D;&#x3D; &quot;love&quot; %&#125;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;love.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect &#x3D;&#x3D; &quot;text&quot; %&#125;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;text.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 打字特效 #&#125;</span><br><span class="line">&#123;% if theme.typing_effect %&#125;</span><br><span class="line">  &lt;script src&#x3D;&quot;&#x2F;js&#x2F;activate-power-mode.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    POWERMODE.colorful &#x3D; &#123;&#123; theme.typing_effect.colorful &#125;&#125;;</span><br><span class="line">    POWERMODE.shake &#x3D; &#123;&#123; theme.typing_effect.shake &#125;&#125;;</span><br><span class="line">    document.body.addEventListener(&#39;input&#39;, POWERMODE);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 代码压缩 #&#125;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;fold_action.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>更新后，选择将其他代码注释，留下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;canvas class&#x3D;&quot;fireworks&quot; style&#x3D;&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;&#x2F;canvas&gt;</span><br><span class="line"> &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;animejs&#x2F;2.2.0&#x2F;anime.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"> &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;explosion.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>


<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p><font color="blue"><a href="https://zhuanlan.zhihu.com/p/163830894">Hexo 和 Next 主题升级</a></font></p>
<p><font color="blue"><a href="https://laytonsun.com/learning/2020-04/upgrade-hexo-and-next.html">升级 Hexo 和 NexT 主题</a></font></p>
<p><font color="blue"><a href="https://jmuava.gitee.io/2021/02/05/Hexo-Next-%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/">个性化设置</a></font></p>
]]></content>
      <tags>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题添加Twikoo评论系统</title>
    <url>/posts/43436/</url>
    <content><![CDATA[<p><font color="red">NexT主题有三个不同的仓库，许多网络上更改主题的文章教程由于时间问题，没有区分这三个仓库的区别，特别是后两个名称相近的。git clone主题的时候注意仓库位置！！</font></p>
<table>
<thead>
<tr>
<th>版本</th>
<th align="left">年份</th>
<th>仓库</th>
</tr>
</thead>
<tbody><tr>
<td>v5.1.4 或更低</td>
<td align="left">2014 ~ 2017</td>
<td><a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a></td>
</tr>
<tr>
<td>v6.0.0 ~ v7.8.0</td>
<td align="left">2018 ~ 2019</td>
<td><a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></td>
</tr>
<tr>
<td>v8.0.0 或更高</td>
<td align="left">2020</td>
<td><a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></td>
</tr>
</tbody></table>
<a id="more"></a>

<h4 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h4><p>​    Next版本7.8.0，想要引入Twikoo评论系统，但是按照官方文档的步骤走完之后，并不能直接成功，反而提示渲染出错。加入了官方群之后，群里的大佬和iMaeGoo_虹墨大佬给了解决办法（好感动，爱了爱了），先升级版本，NexT v8以上的版本可以正常使用Twikoo。</p>
<p><img src="/NexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Twikoo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/1613790670277.png" alt="1613790670277"></p>
<p>由于Twikoo评论系统暂时不兼容v7.8.0（2021-2-19），所以决定先更新NexT主题，这时候就发现我使用的是旧仓库了，因为最新的版本是</p>
<p><img src="/NexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Twikoo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/1613790444876.png" alt="1613790444876"></p>
<p>因此我一直以为v7.8.0是最新版本，直到虹墨大佬说他测过是支持NexT v8.2.1版本时，才发现拉错了仓库(ㄒoㄒ)</p>
<h4 id="引入Twikoo评论系统"><a href="#引入Twikoo评论系统" class="headerlink" title="引入Twikoo评论系统"></a>引入Twikoo评论系统</h4><p>​    有疑问多查看<font color="blue">Twikoo官方文档</font>。</p>
<p>本博客引入Twikoo的步骤：</p>
<ul>
<li>手动部署云函数</li>
</ul>
<p><img src="/NexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Twikoo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/1613791557756.png" alt="1613791557756"></p>
<ul>
<li>安装Twikoo依赖并添加配置</li>
</ul>
<p><img src="/NexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Twikoo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/1613791647448.png" alt="1613791647448"></p>
<h4 id="管理及优化"><a href="#管理及优化" class="headerlink" title="管理及优化"></a>管理及优化</h4><ul>
<li><p>开启管理面板</p>
<p><img src="/NexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Twikoo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/1613810108473.png" alt="1613810108473"></p>
</li>
</ul>
<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p><font color="blue">Twikoo官方文档&lt;/font</font></p>
]]></content>
      <tags>
        <tag>NexT</tag>
        <tag>Twikoo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+NexT 博客个性化配置</title>
    <url>/posts/32997/</url>
    <content><![CDATA[<p>版本：Hexo - 5.3.0    NexT - 7.8.0 (持续更新)</p>
<p>本博客某些部分基于以下配置生效，防止更新丢失，在此做个记录。</p>
<a id="more"></a>



<p><font color="red"><strong>在配置文件里修改前，最好检查下其中是否有存在要修改的同名配置。 如果存在，将两者配置在一起。</strong></font></p>
<blockquote>
<p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>， 后者称为 <strong>主题配置文件</strong>。</p>
</blockquote>
<h3 id="NexT主题版本更新"><a href="#NexT主题版本更新" class="headerlink" title="NexT主题版本更新"></a><font color="red">NexT主题版本更新</font></h3><p>​    本博客搭建的时候使用的NexT版本是7.8.0，在美化主题的时候发现有些教程里的路径如<code>hexo/themes/next/source/css/_custom/custom.styl</code> 是没有的，官方在7.3.0版本更新时推荐采用数据文件，将主题与配置分离，即自定义布局、样式、自定义配置等的代码与主题文件分离。</p>
<ul>
<li><p>将主题配置修改放在<code>hexo/source/_data/next.yml</code>里（_data文件与_post文件同级,没有的话就新建目录，前提是确保NexT版本更新到7.3.0及以上)，这样就不用去修改<code>hexo/themes/next/_config.yml</code>文件，等到NexT再次更新的时候，一些自定义配置就不会因NexT升级而消失，尽量做到平滑升级。</p>
<ol>
<li>在 <code>hexo/source/_data</code> 中新建 <code>next.yml</code> 文件</li>
<li>将 <code>next.yml</code> 中的属性 <code>override</code> 设置为 true</li>
<li>将所有 NexT 主题选项从主题配置文件<code>NexT/_config.yml</code>复制到 <code>hexo/source/_data/next.yml</code> 中</li>
</ol>
</li>
<li><p>将代码放入<code>hexo/source/_data</code>文件夹下，原 <code>hexo/themes/next/source/css/_custom/custom.styl</code> 的配置，现在都放在了<code>hexo/source/_data/styles.styl</code>里，在 NexT 的配置文件 <code>next.yml</code> 中取消 <code>styles.styl</code> 的注释。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line"></span><br><span class="line">-  <span class="comment">#style: source/_data/styles.styl</span></span><br><span class="line">+  style: source/_data/styles.styl <span class="comment">#将style前的#去掉</span></span><br></pre></td></tr></table></figure>
<h3 id="主题颜色"><a href="#主题颜色" class="headerlink" title="主题颜色"></a>主题颜色</h3><p>​    在<code>source/_data</code>目录下的<font color="red"> variables.styl</font>（没有则新增），修改主题颜色。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Colors</span></span><br><span class="line"><span class="comment">// colors for use across theme.</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line">$black-deep   = #02394e;  //修改主题的颜色</span><br></pre></td></tr></table></figure>
<p>​    还有一些其他的设定可以修改颜色，需要的话可以自行修改。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$whitesmoke   = #f5f5f5;</span><br><span class="line">$gainsboro    = #eee;  //这个是边栏头像外框的颜色，</span><br><span class="line">$grey-lighter = #ddd;  //文章中插入图片边框颜色</span><br><span class="line">$grey-light   = #ccc;  //文章之间分割线、下划线颜色</span><br><span class="line">$grey         = #bbb;  //页面选中圆点颜色</span><br><span class="line">$grey-dark    = #999;</span><br><span class="line">$grey-dim     = #666;  //侧边栏目录字体颜色</span><br><span class="line">$black-light  = #555;  //修改文章字体颜色</span><br><span class="line">$black-dim    = #333;</span><br><span class="line">$black-deep   = #02394e;  //修改主题的颜色</span><br><span class="line">$red          = #ff2a2a;</span><br><span class="line">$blue-bright  = #87daff;</span><br><span class="line">$blue         = #0684bd;</span><br><span class="line">$blue-deep    = #262a30;</span><br><span class="line">$orange       = #fc6423;   //浏览文章时，目录选中的颜色</span><br></pre></td></tr></table></figure>
<h3 id="界面样式"><a href="#界面样式" class="headerlink" title="界面样式"></a>界面样式</h3><p>​    修改界面显示的样式,设置位置、背景、显示等。</p>
<p>如不想要这条灰线</p>
<p><img src="/Hexo-Next-%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/1614145911122.png"></p>
<p>按F12定位到样式的设定位置</p>
<p><img src="/Hexo-Next-%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/1614145999390.png"></p>
<p>这条灰线是由于post-footer里没有内容，而post-eof的默认背景是灰色而显示出来的，于是在<code>hexo/source/_data/styles.styl</code>文件里设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.post-eof&#123;</span><br><span class="line">  background: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/Hexo-Next-%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/1614146200662.png" alt="灰线没有了"></p>
<h3 id="主题背景"><a href="#主题背景" class="headerlink" title="主题背景"></a>主题背景</h3><p>​    在<code>_data/styles.styl</code>里，修改背景图片。图片文件放在<code>blog/source/images</code>路径下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//背景图片</span></span><br><span class="line">body &#123;</span><br><span class="line">    background:url(/images/whale.jpg);</span><br><span class="line">    background-repeat: no-repeat; <span class="comment">//不重复</span></span><br><span class="line">    background-attachment:fixed; </span><br><span class="line">    background-size: cover;      <span class="comment">//填充</span></span><br><span class="line">    background-position:<span class="number">50</span>% <span class="number">50</span>%; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="设置圆角"><a href="#设置圆角" class="headerlink" title="设置圆角"></a>设置圆角</h3><p>给侧边栏和菜单栏以及文章部分设置圆角，在<code>_data/variables</code>里添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 圆角设置</span></span><br><span class="line">$border-radius-inner = 10px 10px 10px 10px;</span><br><span class="line">$border-radius = 10px;</span><br></pre></td></tr></table></figure>
<p>菜单栏和文章的边框有圆角了，还差菜单下的侧边框。在<code>_data/styles.styl</code>里添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//侧边框</span></span><br><span class="line">.sidebar &#123;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义鼠标点击特效"><a href="#自定义鼠标点击特效" class="headerlink" title="自定义鼠标点击特效"></a>自定义鼠标点击特效</h3><p>​    网上的博客鼠标点击特效常见的有四种：<font color="red">fireworks | explosion | love | text</font></p>
<p>将对应的js文件放到<code>hexo/source/js</code>，然后在<code>source/_data/next.yml</code>里设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 鼠标点击特效</span></span><br><span class="line"><span class="comment"># mouse click effect: fireworks | explosion | love | text</span></span><br><span class="line">cursor_effect: explosion</span><br></pre></td></tr></table></figure>
<p>由于本博客整体的颜色是蓝色调，为了贴合对点击特效进行了修改。</p>
<p><font color="red">注意：这里颜色的字母要大写</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">function updateCoords(e) &#123;</span><br><span class="line">    pointerX = (e.clientX || e.touches[<span class="number">0</span>].clientX) - canvasEl.getBoundingClientRect().left,</span><br><span class="line">    pointerY = e.clientY || e.touches[<span class="number">0</span>].clientY - canvasEl.getBoundingClientRect().top</span><br><span class="line">&#125;</span><br><span class="line">function setParticuleDirection(e) &#123;</span><br><span class="line">    var t = anime.random(<span class="number">0</span>, <span class="number">360</span>) * Math.PI / <span class="number">180</span>,     //圆出现的角度</span><br><span class="line">    a = anime.random(<span class="number">50</span>, <span class="number">180</span>),</span><br><span class="line">    n = [ - <span class="number">1</span>, <span class="number">1</span>][anime.random(<span class="number">0</span>, <span class="number">1</span>)] * a;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        x: e.x + n * Math.cos(t),</span><br><span class="line">        y: e.y + n * Math.sin(t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function createParticule(e, t) &#123;</span><br><span class="line">    var a = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> a.x = e,</span><br><span class="line">    a.y = t,</span><br><span class="line">    a.color = colors[anime.random(<span class="number">0</span>, colors.length - <span class="number">1</span>)],</span><br><span class="line">    a.radius = anime.random(<span class="number">16</span>, <span class="number">32</span>),</span><br><span class="line">    a.endPos = setParticuleDirection(a),</span><br><span class="line">    a.draw = function() &#123;</span><br><span class="line">        ctx.beginPath(),</span><br><span class="line">        ctx.arc(a.x, a.y, a.radius, <span class="number">0</span>, <span class="number">2</span> * Math.PI, !<span class="number">0</span>),</span><br><span class="line">        ctx.fillStyle = a.color,</span><br><span class="line">        ctx.fill()</span><br><span class="line">    &#125;,</span><br><span class="line">    a</span><br><span class="line">&#125;</span><br><span class="line">function createCircle(e, t) &#123;</span><br><span class="line">    var a = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> a.x = e,</span><br><span class="line">    a.y = t,</span><br><span class="line">    a.color = <span class="string">&quot;#1E92FB&quot;</span>,          //线圈的颜色</span><br><span class="line">    a.radius = <span class="number">.1</span>,</span><br><span class="line">    a.alpha = <span class="number">.5</span>,</span><br><span class="line">    a.lineWidth = <span class="number">3</span>,</span><br><span class="line">    a.draw = function() &#123;</span><br><span class="line">        ctx.globalAlpha = a.alpha,</span><br><span class="line">        ctx.beginPath(),</span><br><span class="line">        ctx.arc(a.x, a.y, a.radius, <span class="number">0</span>, <span class="number">2</span> * Math.PI, !<span class="number">0</span>),</span><br><span class="line">        ctx.lineWidth = a.lineWidth,</span><br><span class="line">        ctx.strokeStyle = a.color,</span><br><span class="line">        ctx.stroke(),</span><br><span class="line">        ctx.globalAlpha = <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    a</span><br><span class="line">&#125;</span><br><span class="line">function renderParticule(e) &#123;</span><br><span class="line">    <span class="keyword">for</span> (var t = <span class="number">0</span>; t &lt; e.animatables.length; t++) e.animatables[t].target.draw()</span><br><span class="line">&#125;</span><br><span class="line">function animateParticules(e, t) &#123;</span><br><span class="line">    <span class="keyword">for</span> (var a = createCircle(e, t), n = [], i = <span class="number">0</span>; i &lt; numberOfParticules; i++) n.push(createParticule(e, t));</span><br><span class="line">    anime.timeline().add(&#123;</span><br><span class="line">        targets: n,</span><br><span class="line">        x: function(e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.endPos.x</span><br><span class="line">        &#125;,</span><br><span class="line">        y: function(e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.endPos.y</span><br><span class="line">        &#125;,</span><br><span class="line">        radius: <span class="number">.1</span>,</span><br><span class="line">        duration: anime.random(<span class="number">1200</span>, <span class="number">1800</span>),</span><br><span class="line">        easing: <span class="string">&quot;easeOutExpo&quot;</span>,</span><br><span class="line">        update: renderParticule</span><br><span class="line">    &#125;).add(&#123;</span><br><span class="line">        targets: a,</span><br><span class="line">        radius: anime.random(<span class="number">80</span>, <span class="number">160</span>),</span><br><span class="line">        lineWidth: <span class="number">0</span>,</span><br><span class="line">        alpha: &#123;</span><br><span class="line">            value: <span class="number">0</span>,</span><br><span class="line">            easing: <span class="string">&quot;linear&quot;</span>,</span><br><span class="line">            duration: anime.random(<span class="number">600</span>, <span class="number">800</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        duration: anime.random(<span class="number">1200</span>, <span class="number">1800</span>),</span><br><span class="line">        easing: <span class="string">&quot;easeOutExpo&quot;</span>,</span><br><span class="line">        update: renderParticule,</span><br><span class="line">        offset: <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function debounce(e, t) &#123;</span><br><span class="line">    var a;</span><br><span class="line">    <span class="keyword">return</span> function() &#123;</span><br><span class="line">        var n = this,</span><br><span class="line">        i = arguments;</span><br><span class="line">        clearTimeout(a),</span><br><span class="line">        a = setTimeout(function() &#123;</span><br><span class="line">            e.apply(n, i)</span><br><span class="line">        &#125;,</span><br><span class="line">        t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var canvasEl = document.querySelector(<span class="string">&quot;.fireworks&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (canvasEl) &#123;</span><br><span class="line">    var ctx = canvasEl.getContext(<span class="string">&quot;2d&quot;</span>),</span><br><span class="line">    numberOfParticules = <span class="number">5</span>,   //点击的圆数量</span><br><span class="line">    pointerX = <span class="number">0</span>,</span><br><span class="line">    pointerY = <span class="number">0</span>,</span><br><span class="line">    tap = <span class="string">&quot;mousedown&quot;</span>,</span><br><span class="line">    colors = [<span class="string">&quot;#447C8C&quot;</span>, <span class="string">&quot;#024E66&quot;</span>, <span class="string">&quot;#387A91&quot;</span>, <span class="string">&quot;#86D8FF&quot;</span>, <span class="string">&quot;#DDEAEF&quot;</span>],//随机出现的颜色</span><br><span class="line">    setCanvasSize = debounce(function() &#123;</span><br><span class="line">        canvasEl.width = <span class="number">2</span> * window.innerWidth,</span><br><span class="line">        canvasEl.height = <span class="number">2</span> * window.innerHeight,</span><br><span class="line">        canvasEl.style.width = window.innerWidth + <span class="string">&quot;px&quot;</span>,</span><br><span class="line">        canvasEl.style.height = window.innerHeight + <span class="string">&quot;px&quot;</span>,</span><br><span class="line">        canvasEl.getContext(<span class="string">&quot;2d&quot;</span>).scale(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">500</span>),</span><br><span class="line">    render = anime(&#123;</span><br><span class="line">        duration: <span class="number">1</span> / <span class="number">0</span>,</span><br><span class="line">        update: function() &#123;</span><br><span class="line">            ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvasEl.width, canvasEl.height)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    document.addEventListener(tap,</span><br><span class="line">    function(e) &#123;</span><br><span class="line">        <span class="string">&quot;sidebar&quot;</span> !== e.target.<span class="built_in">id</span> &amp;&amp; <span class="string">&quot;toggle-sidebar&quot;</span> !== e.target.<span class="built_in">id</span> &amp;&amp; <span class="string">&quot;A&quot;</span> !== e.target.nodeName &amp;&amp; <span class="string">&quot;IMG&quot;</span> !== e.target.nodeName &amp;&amp; (render.play(), updateCoords(e), animateParticules(pointerX, pointerY))</span><br><span class="line">    &#125;,</span><br><span class="line">    !<span class="number">1</span>),</span><br><span class="line">    setCanvasSize(),</span><br><span class="line">    window.addEventListener(<span class="string">&quot;resize&quot;</span>, setCanvasSize, !<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="网页显示logo"><a href="#网页显示logo" class="headerlink" title="网页显示logo"></a>网页显示logo</h3><p>将图片放在<code>hexo/source/images</code>，将图片的名称改为 <font color="red">favicon.ico</font>，同时在<code>next.yml</code>里设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Site Information Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-NexT.org/docs/getting-started/</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">favicon:</span><br><span class="line">  small: /images/favicon.ico</span><br><span class="line">  medium: /images/favicon.ico</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-NexT.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br></pre></td></tr></table></figure>
<h3 id="mac主题的代码块风格"><a href="#mac主题的代码块风格" class="headerlink" title="mac主题的代码块风格"></a>mac主题的代码块风格</h3><p>7.8.0版本的NexT主题已经支持mac风格的代码块设置，在<code>next.yml</code>搜索 <font color="red">codeblock</font> 设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"></span><br><span class="line">  highlight_theme: solarized dark <span class="comment">#支持以上八种主题，为了更加贴近背景，我选择了solarized dark</span></span><br><span class="line">        </span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true <span class="comment"># 增加复制按钮的开关</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    show_result: true<span class="comment"># 点击复制完后是否显示 复制成功 结果提示</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    style: mac</span><br></pre></td></tr></table></figure>
<h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><p>引入依赖：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt </span><br></pre></td></tr></table></figure>
<p>在<strong>站点配置文件</strong>中添加配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line">encrypt:</span><br><span class="line">  enable: true</span><br><span class="line">  abstract: 加密文档，请提升权限（要办卡吗这位朋友~）</span><br><span class="line">  message: 点我输入密码~</span><br><span class="line">  tags:</span><br><span class="line">  - &#123;name: tagName, password: 密码A&#125;</span><br><span class="line">  - &#123;name: tagName, password: 密码B&#125;</span><br><span class="line">  theme: xray</span><br><span class="line">  wrong_pass_message: 密码不太对, 还差一点</span><br><span class="line">  wrong_hash_message: 没有校验, 勉强开放好了  </span><br></pre></td></tr></table></figure>
<h3 id="首页文章显示长度"><a href="#首页文章显示长度" class="headerlink" title="首页文章显示长度"></a>首页文章显示长度</h3><p>​    自 7.6.0 版本开始，<code>auto_excerpt</code> 功能被移除，推荐通过 <code>&lt;!-- more --&gt;</code> 来精确控制 Read More 的位置；或者设置 <code>excerpt_description</code> 然后为每篇文章指定 <code>description</code>。</p>
<h3 id="back2top标签"><a href="#back2top标签" class="headerlink" title="back2top标签"></a>back2top标签</h3><p>​    安装插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cake-moon-menu --save</span><br></pre></td></tr></table></figure>
<p>​    站点配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">moon_menu:</span><br><span class="line">  back2top:</span><br><span class="line">    enable: true</span><br><span class="line">    icon: fa fa-chevron-up</span><br><span class="line">    func: back2top</span><br><span class="line">    order: -1</span><br><span class="line">  back2bottom:</span><br><span class="line">    enable: true</span><br><span class="line">    icon: fa fa-chevron-down</span><br><span class="line">    func: back2bottom</span><br><span class="line">    order: -2</span><br></pre></td></tr></table></figure>
<h3 id="图片弹出"><a href="#图片弹出" class="headerlink" title="图片弹出"></a>图片弹出</h3><p>将文章里的图片弹出显示，使用的是<a href="https://github.com/theme-next/theme-next-fancybox3">fancybox3</a></p>
<p>安装到路径<code>themes/next/source/lib</code>下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-fancybox3 fancybox</span><br></pre></td></tr></table></figure>
<p>然后在主题配置文件中设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fancybox: true</span><br></pre></td></tr></table></figure>
<p>如果需要使用CDN加速：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vendors:</span><br><span class="line">  jquery: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;jquery@3&#x2F;dist&#x2F;jquery.min.js</span><br><span class="line">  fancybox: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;fancyapps&#x2F;fancybox@3&#x2F;dist&#x2F;jquery.fancybox.min.js</span><br><span class="line">  fancybox_css: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;fancyapps&#x2F;fancybox@3&#x2F;dist&#x2F;jquery.fancybox.min.css </span><br></pre></td></tr></table></figure>
<p>更新：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd themes&#x2F;next&#x2F;source&#x2F;lib&#x2F;fancybox</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>
<h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>翻到图片的时候再加载，而不是刷新就将本页面的所有图片加载完</p>
<p>安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure>
<p>站点配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  enable: true</span><br><span class="line">  onlypost: false</span><br><span class="line">  loadingImg: &#x2F;images&#x2F;loading.png</span><br></pre></td></tr></table></figure>
<p>onlypost：是否仅文章中的图片做懒加载,  为false则主题中的其他图片 如头像, logo 等, 也会做懒加载</p>
<h3 id="优化文章url地址"><a href="#优化文章url地址" class="headerlink" title="优化文章url地址"></a>优化文章url地址</h3><p>有中文的链接经常会乱码，因此决定使用插件hexo-abbrlink，将原来的URL地址重新进行进制转换和再编码</p>
<p>安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>在站点配置文件中配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">permalink: posts&#x2F;:abbrlink&#x2F;</span><br><span class="line">permalink_defaults:</span><br><span class="line">abbrlink: </span><br><span class="line">  alg: crc32 # 算法：crc16(default) and crc32 </span><br><span class="line">  rep: hex # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure>
<p>如果同时使用了插件hexo-asset-image和hexo-abbrlink而生成了冲突，详见<a href="http://localhost:4000/posts/e6e4b7aa/">冲突解决办法</a></p>
<h3 id="超链接样式自定义"><a href="#超链接样式自定义" class="headerlink" title="超链接样式自定义"></a>超链接样式自定义</h3><p>在自定义样式文件<code>hexo/source/_data/styles.styl</code>中设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 超链接样式</span><br><span class="line">.post-content a &#123; </span><br><span class="line">    color: rgb(30, 144, 255)</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      color: rgb(30, 144, 255);</span><br><span class="line">      &#x2F;&#x2F;border-bottom-color: rgb(80, 115, 184);</span><br><span class="line">      text-decoration: underline;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><font color="blue"><a href>Hexo-NexT主题配置</a></font></p>
<p><font color="blue"><a href="https://tding.top/archives/2bd6d82.html">Hexo-NexT 版本更新记录</a></font></p>
<p><font color="blue">NexT官方文档</font></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>RUOYI-Vue-SpringBoot: 对拼接的list进行分页操作</title>
    <url>/posts/b692fe48/</url>
    <content><![CDATA[<h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>若依框架封装的 startPage() 方法只对该语句以后的第一个查询（Select）语句得到的数据进行分页。<br>而现在的需求是要对查询到以后进行拼接或筛选的list数据进行分页操作并在前端展示。</p>
<a id="more"></a>

<p>在git上有关于这个的提问 <a href="https://www.csdn.net/">link</a>.<a href="https://gitee.com/y_project/RuoYi-Vue/issues/I1GI52">https://gitee.com/y_project/RuoYi-Vue/issues/I1GI52</a><br>若依大佬简单说了解决办法，在此进行详细的补充<br><img src="/RUOYI-Vue-SpringBoot-%E5%AF%B9%E6%8B%BC%E6%8E%A5%E7%9A%84list%E8%BF%9B%E8%A1%8C%E5%88%86%E9%A1%B5%E6%93%8D%E4%BD%9C/20210121150229579.png"></p>
<h5 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h5><p>从startPage()点进去<br><img src="/RUOYI-Vue-SpringBoot-%E5%AF%B9%E6%8B%BC%E6%8E%A5%E7%9A%84list%E8%BF%9B%E8%A1%8C%E5%88%86%E9%A1%B5%E6%93%8D%E4%BD%9C/20210121150634649.png"><br>这里的pageNum和pageSize是从前端数据里传进来的分页对象的属性<br><img src="/RUOYI-Vue-SpringBoot-%E5%AF%B9%E6%8B%BC%E6%8E%A5%E7%9A%84list%E8%BF%9B%E8%A1%8C%E5%88%86%E9%A1%B5%E6%93%8D%E4%BD%9C/20210121150857124.png"><br><img src="/RUOYI-Vue-SpringBoot-%E5%AF%B9%E6%8B%BC%E6%8E%A5%E7%9A%84list%E8%BF%9B%E8%A1%8C%E5%88%86%E9%A1%B5%E6%93%8D%E4%BD%9C/20210121150835440.png"><br>然后对数据进行处理，当固定每页10条数据时：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> TableDataInfo <span class="title">list</span><span class="params">(TestDto testDto)</span> </span>&#123;</span><br><span class="line">       PageDomain pageDomain = TableSupport.buildPageRequest();</span><br><span class="line">       Integer pageNum = pageDomain.getPageNum();</span><br><span class="line">       Integer pageSize = pageDomain.getPageSize();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取到处理好的list集合</span></span><br><span class="line">       List&lt;TestDto&gt; result= sysTestService.selectSysTestList(testDto);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> num = result.size();</span><br><span class="line">       result = result.stream()</span><br><span class="line">       		.skip((pageNum - <span class="number">1</span>) * pageSize)</span><br><span class="line">       		.limit(pageSize)</span><br><span class="line">       		.collect(Collectors.toList());</span><br><span class="line">       TableDataInfo rspData = <span class="keyword">new</span> TableDataInfo();</span><br><span class="line">       rspData.setCode(HttpStatus.SUCCESS);</span><br><span class="line">       rspData.setRows(result);</span><br><span class="line">       rspData.setTotal(num);</span><br><span class="line">       <span class="keyword">return</span> rspData;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>springBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA里的vue项目iframe（HTML项目）同域连接步骤</title>
    <url>/posts/b2bf1dca/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>vue</tag>
        <tag>iframe</tag>
        <tag>html</tag>
      </tags>
  </entry>
</search>
